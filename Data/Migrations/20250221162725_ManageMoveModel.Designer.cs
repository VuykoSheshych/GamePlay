// <auto-generated />
using System;
using GamePlayService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GamePlayService.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250221162725_ManageMoveModel")]
    partial class ManageMoveModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GamePlayService.Models.GameRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlayerBlack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlayerWhite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameRecords");
                });

            modelBuilder.Entity("GamePlayService.Models.MovePair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlackMoveFrom")
                        .HasColumnType("text");

                    b.Property<string>("BlackMoveTo")
                        .HasColumnType("text");

                    b.Property<string>("BlackSanNotation")
                        .HasColumnType("text");

                    b.Property<string>("FenAfter")
                        .HasColumnType("text");

                    b.Property<string>("FenBefore")
                        .HasColumnType("text");

                    b.Property<Guid?>("GameRecordId")
                        .HasColumnType("uuid");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WhiteMoveFrom")
                        .HasColumnType("text");

                    b.Property<string>("WhiteMoveTo")
                        .HasColumnType("text");

                    b.Property<string>("WhiteSanNotation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameRecordId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("GamePlayService.Models.MovePair", b =>
                {
                    b.HasOne("GamePlayService.Models.GameRecord", null)
                        .WithMany("Moves")
                        .HasForeignKey("GameRecordId");
                });

            modelBuilder.Entity("GamePlayService.Models.GameRecord", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
