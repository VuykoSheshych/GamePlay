{
  "api/GamePlayService.Controllers.GameRecordController.html": {
    "href": "api/GamePlayService.Controllers.GameRecordController.html",
    "title": "Class GameRecordController | ChessGamePlayService",
    "summary": "Class GameRecordController Namespace GamePlayService.Controllers Assembly GamePlayService.dll Controller for interacting with completed game records. Provides APIs for retrieving game records by ID and for retrieving all records. [ApiController] [Route(\"api/games\")] public class GameRecordController : ControllerBase Inheritance object ControllerBase GameRecordController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameRecordController(IGameRecordService) Controller for interacting with completed game records. Provides APIs for retrieving game records by ID and for retrieving all records. public GameRecordController(IGameRecordService gameRecordService) Parameters gameRecordService IGameRecordService Methods GetAllGameRecords() Returns all game records. [HttpGet] public Task<IActionResult> GetAllGameRecords() Returns Task<IActionResult> List of game records or NotFound if no record was found. GetGameRecordById(Guid) Returns the game record with the specified ID. [HttpGet(\"{gameId}\")] public Task<IActionResult> GetGameRecordById(Guid gameId) Parameters gameId Guid Game ID. Returns Task<IActionResult> Game record or NotFound if record not found."
  },
  "api/GamePlayService.Controllers.html": {
    "href": "api/GamePlayService.Controllers.html",
    "title": "Namespace GamePlayService.Controllers | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Controllers Classes GameRecordController Controller for interacting with completed game records. Provides APIs for retrieving game records by ID and for retrieving all records."
  },
  "api/GamePlayService.Data.GameDbContext.html": {
    "href": "api/GamePlayService.Data.GameDbContext.html",
    "title": "Class GameDbContext | ChessGamePlayService",
    "summary": "Class GameDbContext Namespace GamePlayService.Data Assembly GamePlayService.dll Represents the database context for the chess game, handling game records and moves. public class GameDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext GameDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameDbContext(DbContextOptions<GameDbContext>) Represents the database context for the chess game, handling game records and moves. public GameDbContext(DbContextOptions<GameDbContext> options) Parameters options DbContextOptions<GameDbContext> Properties GameRecords Gets or sets the database set for storing game records. public DbSet<GameRecord> GameRecords { get; set; } Property Value DbSet<GameRecord> Moves Gets or sets the database set for storing individual chess moves. public DbSet<Move> Moves { get; set; } Property Value DbSet<Move>"
  },
  "api/GamePlayService.Data.html": {
    "href": "api/GamePlayService.Data.html",
    "title": "Namespace GamePlayService.Data | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Data Classes GameDbContext Represents the database context for the chess game, handling game records and moves."
  },
  "api/GamePlayService.Dtos.ChatMessageDto.html": {
    "href": "api/GamePlayService.Dtos.ChatMessageDto.html",
    "title": "Class ChatMessageDto | ChessGamePlayService",
    "summary": "Class ChatMessageDto Namespace GamePlayService.Dtos Assembly GamePlayService.dll Represents a chat message sent during the game, containing the author and the message text. public record ChatMessageDto : IEquatable<ChatMessageDto> Inheritance object ChatMessageDto Implements IEquatable<ChatMessageDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChatMessageDto(string, string) Represents a chat message sent during the game, containing the author and the message text. public ChatMessageDto(string Author, string Text) Parameters Author string Text string Properties Author public string Author { get; init; } Property Value string Text public string Text { get; init; } Property Value string"
  },
  "api/GamePlayService.Dtos.GameResultDto.html": {
    "href": "api/GamePlayService.Dtos.GameResultDto.html",
    "title": "Class GameResultDto | ChessGamePlayService",
    "summary": "Class GameResultDto Namespace GamePlayService.Dtos Assembly GamePlayService.dll Represents a chat message sent during the game, containing the author and the message text. public record GameResultDto : IEquatable<GameResultDto> Inheritance object GameResultDto Implements IEquatable<GameResultDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameResultDto(string, string, int, string, int) Represents a chat message sent during the game, containing the author and the message text. public GameResultDto(string GameId, string PlayerLooserName, int PlayerLooserElo, string PlayerWinnerName, int PlayerWinnerElo) Parameters GameId string PlayerLooserName string PlayerLooserElo int PlayerWinnerName string PlayerWinnerElo int Properties GameId public string GameId { get; init; } Property Value string PlayerLooserElo public int PlayerLooserElo { get; init; } Property Value int PlayerLooserName public string PlayerLooserName { get; init; } Property Value string PlayerWinnerElo public int PlayerWinnerElo { get; init; } Property Value int PlayerWinnerName public string PlayerWinnerName { get; init; } Property Value string"
  },
  "api/GamePlayService.Dtos.MoveDto.html": {
    "href": "api/GamePlayService.Dtos.MoveDto.html",
    "title": "Class MoveDto | ChessGamePlayService",
    "summary": "Class MoveDto Namespace GamePlayService.Dtos Assembly GamePlayService.dll Represents a move in chess, including the starting and ending positions, as well as optional promotion for pawns. public record MoveDto : IEquatable<MoveDto> Inheritance object MoveDto Implements IEquatable<MoveDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MoveDto(string, string, string?) Represents a move in chess, including the starting and ending positions, as well as optional promotion for pawns. public MoveDto(string From, string To, string? Promotion = null) Parameters From string To string Promotion string Properties From public string From { get; init; } Property Value string Promotion public string? Promotion { get; init; } Property Value string To public string To { get; init; } Property Value string"
  },
  "api/GamePlayService.Dtos.MoveResultDto.html": {
    "href": "api/GamePlayService.Dtos.MoveResultDto.html",
    "title": "Class MoveResultDto | ChessGamePlayService",
    "summary": "Class MoveResultDto Namespace GamePlayService.Dtos Assembly GamePlayService.dll Represents the result of a move in the chess game, indicating whether it was successful and providing a message. public record MoveResultDto : IEquatable<MoveResultDto> Inheritance object MoveResultDto Implements IEquatable<MoveResultDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MoveResultDto(bool, string) Represents the result of a move in the chess game, indicating whether it was successful and providing a message. public MoveResultDto(bool IsSuccess, string Message) Parameters IsSuccess bool Message string Properties IsSuccess public bool IsSuccess { get; init; } Property Value bool Message public string Message { get; init; } Property Value string Methods Error(string) Creates an error move result with a provided message. public static MoveResultDto Error(string message) Parameters message string The error message to be returned. Returns MoveResultDto A MoveResultDto with IsSuccess set to false and the provided message. Success(string) Creates a successful move result with a provided message. public static MoveResultDto Success(string message) Parameters message string The success message to be returned. Returns MoveResultDto A MoveResultDto with IsSuccess set to true and the provided message."
  },
  "api/GamePlayService.Dtos.PlayerInGameDto.html": {
    "href": "api/GamePlayService.Dtos.PlayerInGameDto.html",
    "title": "Class PlayerInGameDto | ChessGamePlayService",
    "summary": "Class PlayerInGameDto Namespace GamePlayService.Dtos Assembly GamePlayService.dll Represents a player participating in a chess game, containing their name, connection ID, and time reserve. public record PlayerInGameDto : IEquatable<PlayerInGameDto> Inheritance object PlayerInGameDto Implements IEquatable<PlayerInGameDto> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerInGameDto(string, string, TimeSpan) Represents a player participating in a chess game, containing their name, connection ID, and time reserve. public PlayerInGameDto(string Name, string ConnectionId, TimeSpan TimeReserve) Parameters Name string ConnectionId string TimeReserve TimeSpan Properties ConnectionId public string ConnectionId { get; init; } Property Value string Name public string Name { get; init; } Property Value string TimeReserve public TimeSpan TimeReserve { get; init; } Property Value TimeSpan"
  },
  "api/GamePlayService.Dtos.html": {
    "href": "api/GamePlayService.Dtos.html",
    "title": "Namespace GamePlayService.Dtos | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Dtos Classes ChatMessageDto Represents a chat message sent during the game, containing the author and the message text. GameResultDto Represents a chat message sent during the game, containing the author and the message text. MoveDto Represents a move in chess, including the starting and ending positions, as well as optional promotion for pawns. MoveResultDto Represents the result of a move in the chess game, indicating whether it was successful and providing a message. PlayerInGameDto Represents a player participating in a chess game, containing their name, connection ID, and time reserve."
  },
  "api/GamePlayService.Migrations.AddGameRecordTable.html": {
    "href": "api/GamePlayService.Migrations.AddGameRecordTable.html",
    "title": "Class AddGameRecordTable | ChessGamePlayService",
    "summary": "Class AddGameRecordTable Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250220193507_AddGameRecordTable\")] public class AddGameRecordTable : Migration Inheritance object Migration AddGameRecordTable Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.AddTimeToGameRecords.html": {
    "href": "api/GamePlayService.Migrations.AddTimeToGameRecords.html",
    "title": "Class AddTimeToGameRecords | ChessGamePlayService",
    "summary": "Class AddTimeToGameRecords Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250311052733_AddTimeToGameRecords\")] public class AddTimeToGameRecords : Migration Inheritance object Migration AddTimeToGameRecords Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.EditMoves.html": {
    "href": "api/GamePlayService.Migrations.EditMoves.html",
    "title": "Class EditMoves | ChessGamePlayService",
    "summary": "Class EditMoves Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250222165030_EditMoves\")] public class EditMoves : Migration Inheritance object Migration EditMoves Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.EditMovesAgain.html": {
    "href": "api/GamePlayService.Migrations.EditMovesAgain.html",
    "title": "Class EditMovesAgain | ChessGamePlayService",
    "summary": "Class EditMovesAgain Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250223204845_EditMovesAgain\")] public class EditMovesAgain : Migration Inheritance object Migration EditMovesAgain Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.GamesTableEdit.html": {
    "href": "api/GamePlayService.Migrations.GamesTableEdit.html",
    "title": "Class GamesTableEdit | ChessGamePlayService",
    "summary": "Class GamesTableEdit Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250220153123_GamesTableEdit\")] public class GamesTableEdit : Migration Inheritance object Migration GamesTableEdit Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.InitialCreate.html": {
    "href": "api/GamePlayService.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | ChessGamePlayService",
    "summary": "Class InitialCreate Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250116122209_InitialCreate\")] public class InitialCreate : Migration Inheritance object Migration InitialCreate Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.ManageMoveModel.html": {
    "href": "api/GamePlayService.Migrations.ManageMoveModel.html",
    "title": "Class ManageMoveModel | ChessGamePlayService",
    "summary": "Class ManageMoveModel Namespace GamePlayService.Migrations Assembly GamePlayService.dll A base class inherited by each EF Core migration. [DbContext(typeof(GameDbContext))] [Migration(\"20250221162725_ManageMoveModel\")] public class ManageMoveModel : Migration Inheritance object Migration ManageMoveModel Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/GamePlayService.Migrations.html": {
    "href": "api/GamePlayService.Migrations.html",
    "title": "Namespace GamePlayService.Migrations | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Migrations Classes AddGameRecordTable A base class inherited by each EF Core migration. AddTimeToGameRecords A base class inherited by each EF Core migration. EditMoves A base class inherited by each EF Core migration. EditMovesAgain A base class inherited by each EF Core migration. GamesTableEdit A base class inherited by each EF Core migration. InitialCreate A base class inherited by each EF Core migration. ManageMoveModel A base class inherited by each EF Core migration."
  },
  "api/GamePlayService.Models.BoardState.html": {
    "href": "api/GamePlayService.Models.BoardState.html",
    "title": "Class BoardState | ChessGamePlayService",
    "summary": "Class BoardState Namespace GamePlayService.Models Assembly GamePlayService.dll Represents the state of a chessboard, including piece positions and game metadata. public class BoardState Inheritance object BoardState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BoardState() Initializes a new instance of the BoardState class with the standard starting position. public BoardState() BoardState(string) Initializes a new instance of the BoardState class from a given FEN string. public BoardState(string fen) Parameters fen string The FEN (Forsyth-Edwards Notation) string representing the board position. Properties ActiveColor The color of the player who is to move next (\"w\" for white, \"b\" for black). public string ActiveColor { get; } Property Value string Board The 8x8 board representation where each cell contains a chess piece or is empty. public char[,] Board { get; } Property Value char[,] CastlingRights The current castling rights in the game (\"KQkq\" format). public string CastlingRights { get; } Property Value string EnPassant The en passant target square, if applicable. public string EnPassant { get; } Property Value string FEN The current board position in FEN (Forsyth-Edwards Notation). public string FEN { get; } Property Value string FullmoveNumber The full move number, which increments after Black's turn. public int FullmoveNumber { get; } Property Value int HalfmoveClock The halfmove clock for the fifty-move rule. public int HalfmoveClock { get; } Property Value int Methods ApplyMove(MoveDto) Applies a move to the board, updating its state accordingly. public void ApplyMove(MoveDto move) Parameters move MoveDto The move to be applied. GetAllPieces(string) Retrieves all pieces of a specified color from the board. public List<(int row, int col)> GetAllPieces(string color) Parameters color string The color of pieces to retrieve (\"w\" for white, \"b\" for black). Returns List<(int row, int col)> A list of tuples containing the row and column indices of the pieces."
  },
  "api/GamePlayService.Models.ChessPiece.html": {
    "href": "api/GamePlayService.Models.ChessPiece.html",
    "title": "Class ChessPiece | ChessGamePlayService",
    "summary": "Class ChessPiece Namespace GamePlayService.Models Assembly GamePlayService.dll Represents an abstract chess piece with color, position, and movement logic. public abstract class ChessPiece Inheritance object ChessPiece Derived Bishop King Knight Pawn Queen Rook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChessPiece(string, string) Represents an abstract chess piece with color, position, and movement logic. protected ChessPiece(string color, string position) Parameters color string position string Properties Color The color of the chess piece (\"w\" for white, \"b\" for black). public string Color { get; set; } Property Value string Position The current position of the chess piece in standard chess notation (e.g., \"e4\"). public string Position { get; set; } Property Value string Methods ConvertToBoardIndex(string) Converts a chess position (e.g., \"e4\") into board indices (row, column). public static (int row, int col) ConvertToBoardIndex(string position) Parameters position string The position in chess notation. Returns (int row, int col) A tuple containing the row and column indices. GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public abstract List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation. IsOpponentPiece(char) Checks if a given piece belongs to the opponent. protected bool IsOpponentPiece(char piece) Parameters piece char The piece character to check. Returns bool true if the piece belongs to the opponent, otherwise false. IsValidCell(int, int) Checks if a given row and column are within the valid bounds of the board. protected bool IsValidCell(int row, int col) Parameters row int The row index (0-7). col int The column index (0-7). Returns bool true if the cell is within the board, otherwise false."
  },
  "api/GamePlayService.Models.GameRecord.html": {
    "href": "api/GamePlayService.Models.GameRecord.html",
    "title": "Class GameRecord | ChessGamePlayService",
    "summary": "Class GameRecord Namespace GamePlayService.Models Assembly GamePlayService.dll Represents a record of a completed chess game, including players, moves, and result. public class GameRecord Inheritance object GameRecord Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Finished The date and time when the game finished. public DateTime Finished { get; set; } Property Value DateTime Id The unique identifier for the game record. public Guid Id { get; set; } Property Value Guid Moves A list of moves made during the game. public virtual List<Move> Moves { get; set; } Property Value List<Move> PlayerBlack The name of the player playing as Black. public string PlayerBlack { get; set; } Property Value string PlayerWhite The name of the player playing as White. public string PlayerWhite { get; set; } Property Value string Result The result of the game (e.g., \"1-0\" for White win, \"0-1\" for Black win, \"½-½\" for draw). public string Result { get; set; } Property Value string Started The date and time when the game started. public DateTime Started { get; set; } Property Value DateTime"
  },
  "api/GamePlayService.Models.GameSession.html": {
    "href": "api/GamePlayService.Models.GameSession.html",
    "title": "Class GameSession | ChessGamePlayService",
    "summary": "Class GameSession Namespace GamePlayService.Models Assembly GamePlayService.dll Represents a session of a chess game, including players, moves, chat messages, and the current game state (FEN). public class GameSession Inheritance object GameSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlackPlayer The details of the player playing as White. public required PlayerInGameDto BlackPlayer { get; set; } Property Value PlayerInGameDto CreatedAt The date and time when the game session was created. public DateTime CreatedAt { get; set; } Property Value DateTime CurrentFen The current FEN (Forsyth-Edwards Notation) string representing the state of the chessboard. public string CurrentFen { get; set; } Property Value string Id The unique identifier for the game session. public Guid Id { get; set; } Property Value Guid Messages A list of chat messages sent during the game. public List<ChatMessageDto> Messages { get; set; } Property Value List<ChatMessageDto> Moves A list of moves made during the game. public List<Move> Moves { get; set; } Property Value List<Move> WhitePlayer The details of the player playing as White. public required PlayerInGameDto WhitePlayer { get; set; } Property Value PlayerInGameDto"
  },
  "api/GamePlayService.Models.Move.html": {
    "href": "api/GamePlayService.Models.Move.html",
    "title": "Class Move | ChessGamePlayService",
    "summary": "Class Move Namespace GamePlayService.Models Assembly GamePlayService.dll Represents a move made by a player during a chess game, including the move's details, notation, and timestamp. public class Move Inheritance object Move Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FenBefore The FEN string representing the state of the board before the move was made. public string FenBefore { get; set; } Property Value string From The starting position of the piece being moved, in chess notation (e.g., \"e2\"). public string From { get; set; } Property Value string Id The unique identifier for the move. public Guid Id { get; set; } Property Value Guid MoveNumber The full move number in the game (e.g., 1 for the first move, 2 for the second move, etc.). public int MoveNumber { get; set; } Property Value int PlayerColor The color of the player who made the move (either \"w\" for White or \"b\" for Black). public string PlayerColor { get; set; } Property Value string Promotion Optional. The piece the pawn is promoted to, if the move is a pawn promotion (e.g., \"Q\" for queen, \"R\" for rook, etc.). public string? Promotion { get; set; } Property Value string SanNotation The move in Standard Algebraic Notation (SAN), used to represent the move in chess notation (e.g., \"Bxc5+\", \"Nf3\"). public string SanNotation { get; set; } Property Value string Timestamp The date and time when the move was made. public DateTime Timestamp { get; set; } Property Value DateTime To The destination position of the piece, in chess notation (e.g., \"e4\"). public string To { get; set; } Property Value string"
  },
  "api/GamePlayService.Models.Pieces.Bishop.html": {
    "href": "api/GamePlayService.Models.Pieces.Bishop.html",
    "title": "Class Bishop | ChessGamePlayService",
    "summary": "Class Bishop Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a bishop chess piece and its movement logic. public class Bishop : ChessPiece Inheritance object ChessPiece Bishop Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Bishop(string, string) Represents a bishop chess piece and its movement logic. public Bishop(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.King.html": {
    "href": "api/GamePlayService.Models.Pieces.King.html",
    "title": "Class King | ChessGamePlayService",
    "summary": "Class King Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a king chess piece and its movement logic. public class King : ChessPiece Inheritance object ChessPiece King Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors King(string, string) Represents a king chess piece and its movement logic. public King(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.Knight.html": {
    "href": "api/GamePlayService.Models.Pieces.Knight.html",
    "title": "Class Knight | ChessGamePlayService",
    "summary": "Class Knight Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a knight chess piece and its movement logic. public class Knight : ChessPiece Inheritance object ChessPiece Knight Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Knight(string, string) Represents a knight chess piece and its movement logic. public Knight(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.Pawn.html": {
    "href": "api/GamePlayService.Models.Pieces.Pawn.html",
    "title": "Class Pawn | ChessGamePlayService",
    "summary": "Class Pawn Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a pawn chess piece and its movement logic. public class Pawn : ChessPiece Inheritance object ChessPiece Pawn Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Pawn(string, string) Represents a pawn chess piece and its movement logic. public Pawn(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.Queen.html": {
    "href": "api/GamePlayService.Models.Pieces.Queen.html",
    "title": "Class Queen | ChessGamePlayService",
    "summary": "Class Queen Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a queen chess piece and its movement logic. public class Queen : ChessPiece Inheritance object ChessPiece Queen Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Queen(string, string) Represents a queen chess piece and its movement logic. public Queen(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.Rook.html": {
    "href": "api/GamePlayService.Models.Pieces.Rook.html",
    "title": "Class Rook | ChessGamePlayService",
    "summary": "Class Rook Namespace GamePlayService.Models.Pieces Assembly GamePlayService.dll Represents a rook chess piece and its movement logic. public class Rook : ChessPiece Inheritance object ChessPiece Rook Inherited Members ChessPiece.Color ChessPiece.Position ChessPiece.ConvertToBoardIndex(string) ChessPiece.IsValidCell(int, int) ChessPiece.IsOpponentPiece(char) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Rook(string, string) Represents a rook chess piece and its movement logic. public Rook(string color, string position) Parameters color string position string Methods GetPossibleMoves(BoardState) Returns a list of valid moves for the chess piece based on the current board state. public override List<string> GetPossibleMoves(BoardState boardState) Parameters boardState BoardState The current state of the chessboard. Returns List<string> A list of valid move positions in chess notation."
  },
  "api/GamePlayService.Models.Pieces.html": {
    "href": "api/GamePlayService.Models.Pieces.html",
    "title": "Namespace GamePlayService.Models.Pieces | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Models.Pieces Classes Bishop Represents a bishop chess piece and its movement logic. King Represents a king chess piece and its movement logic. Knight Represents a knight chess piece and its movement logic. Pawn Represents a pawn chess piece and its movement logic. Queen Represents a queen chess piece and its movement logic. Rook Represents a rook chess piece and its movement logic."
  },
  "api/GamePlayService.Models.html": {
    "href": "api/GamePlayService.Models.html",
    "title": "Namespace GamePlayService.Models | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Models Classes BoardState Represents the state of a chessboard, including piece positions and game metadata. ChessPiece Represents an abstract chess piece with color, position, and movement logic. GameRecord Represents a record of a completed chess game, including players, moves, and result. GameSession Represents a session of a chess game, including players, moves, chat messages, and the current game state (FEN). Move Represents a move made by a player during a chess game, including the move's details, notation, and timestamp."
  },
  "api/GamePlayService.Services.ChessValidator.html": {
    "href": "api/GamePlayService.Services.ChessValidator.html",
    "title": "Class ChessValidator | ChessGamePlayService",
    "summary": "Class ChessValidator Namespace GamePlayService.Services Assembly GamePlayService.dll Provides validation logic for chess moves based on the current board state. public static class ChessValidator Inheritance object ChessValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMoveValidationResult(BoardState, MoveDto) Validates a given chess move according to game rules. public static MoveResultDto GetMoveValidationResult(BoardState boardState, MoveDto moveDto) Parameters boardState BoardState The current state of the chessboard, including piece positions and active color. moveDto MoveDto The move details, including the starting and ending positions. Returns MoveResultDto A MoveResultDto indicating whether the move is valid or contains an error message."
  },
  "api/GamePlayService.Services.GameHub.html": {
    "href": "api/GamePlayService.Services.GameHub.html",
    "title": "Class GameHub | ChessGamePlayService",
    "summary": "Class GameHub Namespace GamePlayService.Services Assembly GamePlayService.dll SignalR hub for managing game sessions and player interactions. public class GameHub : Hub, IDisposable Inheritance object Hub GameHub Implements IDisposable Inherited Members Hub.OnConnectedAsync() Hub.OnDisconnectedAsync(Exception) Hub.Dispose(bool) Hub.Dispose() Hub.Clients Hub.Context Hub.Groups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameHub(IGameSessionService, IGameSearchService) SignalR hub for managing game sessions and player interactions. public GameHub(IGameSessionService gamesSessionService, IGameSearchService gameSearchService) Parameters gamesSessionService IGameSessionService gameSearchService IGameSearchService Methods CreateGame(List<(string name, string id)>) Creates a new game session with the specified players. public Task<string> CreateGame(List<(string name, string id)> players) Parameters players List<(string name, string id)> List of players with their names and IDs. Returns Task<string> The unique ID of the created game. FinishGame(string, string) Ends a game session and determines the result. public Task FinishGame(string gameId, string looser) Parameters gameId string The game session ID. looser string The name of the player who lost, or \"½-½\" for a draw. Returns Task JoinGame(string, List<(string name, string id)>) Adds players to an existing game session and notifies them. public Task JoinGame(string gameId, List<(string name, string id)> players) Parameters gameId string The game session ID. players List<(string name, string id)> List of players joining the game. Returns Task MakeMove(string, MoveDto) Processes a player's move in a game session. public Task MakeMove(string gameId, MoveDto moveDto) Parameters gameId string The game session ID. moveDto MoveDto The move details. Returns Task SendMessage(string, ChatMessageDto) Sends a chat message to all players in a game session. public Task SendMessage(string gameId, ChatMessageDto chatMessage) Parameters gameId string The game session ID. chatMessage ChatMessageDto The chat message details. Returns Task StartGameSearch(string) Initiates a game search for a player. public Task StartGameSearch(string playerName) Parameters playerName string The name of the player searching for a game. Returns Task StopGameSearch(string) Stops the game search for a player. public Task StopGameSearch(string playerName) Parameters playerName string The name of the player stopping the search. Returns Task"
  },
  "api/GamePlayService.Services.GameRecordService.html": {
    "href": "api/GamePlayService.Services.GameRecordService.html",
    "title": "Class GameRecordService | ChessGamePlayService",
    "summary": "Class GameRecordService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing game records in the database. public class GameRecordService : IGameRecordService Inheritance object GameRecordService Implements IGameRecordService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameRecordService(GameDbContext) Provides methods for managing game records in the database. public GameRecordService(GameDbContext context) Parameters context GameDbContext Methods AddGameRecordAsync(GameRecord) Adds a new game record to the database. public Task AddGameRecordAsync(GameRecord gameRecord) Parameters gameRecord GameRecord The game record to add. Returns Task GetAllGameRecordsAsync() Retrieves all game records from the database. public Task<List<GameRecord>?> GetAllGameRecordsAsync() Returns Task<List<GameRecord>> A list of all game records, or null if none are found. GetGameRecordByIdAsync(Guid) Retrieves a game record by its unique identifier. public Task<GameRecord?> GetGameRecordByIdAsync(Guid gameId) Parameters gameId Guid The unique identifier of the game record. Returns Task<GameRecord> The game record if found; otherwise, null."
  },
  "api/GamePlayService.Services.GameSearchService.html": {
    "href": "api/GamePlayService.Services.GameSearchService.html",
    "title": "Class GameSearchService | ChessGamePlayService",
    "summary": "Class GameSearchService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing the game search process, including adding and removing players from the search queue. public class GameSearchService : IGameSearchService Inheritance object GameSearchService Implements IGameSearchService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameSearchService(IConnectionMultiplexer) Provides methods for managing the game search process, including adding and removing players from the search queue. public GameSearchService(IConnectionMultiplexer redis) Parameters redis IConnectionMultiplexer Methods AddPlayerToSearchQueue(string, string) Adds a player to the matchmaking queue. public Task AddPlayerToSearchQueue(string playerName, string playerConnectionId) Parameters playerName string The name of the player to be added. playerConnectionId string The connection ID of the player. Returns Task FindPlayersForGame() Attempts to find a pair of players for a game session. public Task<List<(string name, string id)>?> FindPlayersForGame() Returns Task<List<(string name, string id)>> A list containing two players with their connection IDs, or null if not enough players are available. GetPlayerConnectionId(string) Retrieves the connection ID of a player currently in the search queue. public Task<string?> GetPlayerConnectionId(string playerName) Parameters playerName string The name of the player whose connection ID is being retrieved. Returns Task<string> The connection ID of the player, or null if the player is not in the queue. RemovePlayerFromSearchQueue(string) Removes a player from the matchmaking queue. public Task RemovePlayerFromSearchQueue(string playerName) Parameters playerName string The name of the player to be removed. Returns Task"
  },
  "api/GamePlayService.Services.GameSessionService.html": {
    "href": "api/GamePlayService.Services.GameSessionService.html",
    "title": "Class GameSessionService | ChessGamePlayService",
    "summary": "Class GameSessionService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing game sessions, including creation, updates, and moves processing. public class GameSessionService : IGameSessionService Inheritance object GameSessionService Implements IGameSessionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameSessionService(IConnectionMultiplexer, IGameRecordService) Provides methods for managing game sessions, including creation, updates, and moves processing. public GameSessionService(IConnectionMultiplexer redis, IGameRecordService gameService) Parameters redis IConnectionMultiplexer gameService IGameRecordService Methods CreateGameSessionAsync(List<(string name, string id)>) Creates a new game session with the specified players. public Task<Guid> CreateGameSessionAsync(List<(string name, string id)> players) Parameters players List<(string name, string id)> A list of player names and their connection IDs. Returns Task<Guid> The unique identifier of the newly created game session. GetGameSessionAsync(string) Retrieves an active game session by its unique identifier. public Task<GameSession?> GetGameSessionAsync(string gameId) Parameters gameId string The unique identifier of the game session. Returns Task<GameSession> The game session if found; otherwise, null. RemoveGameSessionAsync(string, string) Removes a completed or abandoned game session. public Task RemoveGameSessionAsync(string gameId, string result) Parameters gameId string The unique identifier of the game session to remove. result string The final result of the game session (e.g., \"1-0\" for White win, \"0-1\" for Black win, \"½-½\" for draw). Returns Task SaveGameRecordAsync(GameSession, string) Saves a completed game session as a historical record. public Task SaveGameRecordAsync(GameSession gameSession, string result) Parameters gameSession GameSession The completed game session to save. result string The final result of the game session (e.g., \"1-0\" for White win, \"0-1\" for Black win, \"½-½\" for draw). Returns Task SaveGameSessionAsync(GameSession) Saves the current state of an active game session. public Task SaveGameSessionAsync(GameSession gameSession) Parameters gameSession GameSession The game session to save. Returns Task TryMakeMoveAsync(string, MoveDto) Processes a move attempt in an active game session. public Task<MoveResultDto> TryMakeMoveAsync(string gameId, MoveDto moveDto) Parameters gameId string The unique identifier of the game session. moveDto MoveDto The move data containing details of the move. Returns Task<MoveResultDto> The result of the move attempt, indicating success or failure."
  },
  "api/GamePlayService.Services.IGameRecordService.html": {
    "href": "api/GamePlayService.Services.IGameRecordService.html",
    "title": "Interface IGameRecordService | ChessGamePlayService",
    "summary": "Interface IGameRecordService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing game records in the database. public interface IGameRecordService Methods AddGameRecordAsync(GameRecord) Adds a new game record to the database. Task AddGameRecordAsync(GameRecord gameRecord) Parameters gameRecord GameRecord The game record to add. Returns Task GetAllGameRecordsAsync() Retrieves all game records from the database. Task<List<GameRecord>?> GetAllGameRecordsAsync() Returns Task<List<GameRecord>> A list of all game records, or null if none are found. GetGameRecordByIdAsync(Guid) Retrieves a game record by its unique identifier. Task<GameRecord?> GetGameRecordByIdAsync(Guid gameId) Parameters gameId Guid The unique identifier of the game record. Returns Task<GameRecord> The game record if found; otherwise, null."
  },
  "api/GamePlayService.Services.IGameSearchService.html": {
    "href": "api/GamePlayService.Services.IGameSearchService.html",
    "title": "Interface IGameSearchService | ChessGamePlayService",
    "summary": "Interface IGameSearchService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing the game search process, including adding and removing players from the search queue. public interface IGameSearchService Methods AddPlayerToSearchQueue(string, string) Adds a player to the matchmaking queue. Task AddPlayerToSearchQueue(string playerName, string playerConnectionId) Parameters playerName string The name of the player to be added. playerConnectionId string The connection ID of the player. Returns Task FindPlayersForGame() Attempts to find a pair of players for a game session. Task<List<(string name, string id)>?> FindPlayersForGame() Returns Task<List<(string name, string id)>> A list containing two players with their connection IDs, or null if not enough players are available. GetPlayerConnectionId(string) Retrieves the connection ID of a player currently in the search queue. Task<string?> GetPlayerConnectionId(string playerName) Parameters playerName string The name of the player whose connection ID is being retrieved. Returns Task<string> The connection ID of the player, or null if the player is not in the queue. RemovePlayerFromSearchQueue(string) Removes a player from the matchmaking queue. Task RemovePlayerFromSearchQueue(string playerName) Parameters playerName string The name of the player to be removed. Returns Task"
  },
  "api/GamePlayService.Services.IGameSessionService.html": {
    "href": "api/GamePlayService.Services.IGameSessionService.html",
    "title": "Interface IGameSessionService | ChessGamePlayService",
    "summary": "Interface IGameSessionService Namespace GamePlayService.Services Assembly GamePlayService.dll Provides methods for managing game sessions, including creation, updates, and moves processing. public interface IGameSessionService Methods CreateGameSessionAsync(List<(string name, string id)>) Creates a new game session with the specified players. Task<Guid> CreateGameSessionAsync(List<(string name, string id)> players) Parameters players List<(string name, string id)> A list of player names and their connection IDs. Returns Task<Guid> The unique identifier of the newly created game session. GetGameSessionAsync(string) Retrieves an active game session by its unique identifier. Task<GameSession?> GetGameSessionAsync(string gameId) Parameters gameId string The unique identifier of the game session. Returns Task<GameSession> The game session if found; otherwise, null. RemoveGameSessionAsync(string, string) Removes a completed or abandoned game session. Task RemoveGameSessionAsync(string gameId, string result) Parameters gameId string The unique identifier of the game session to remove. result string The final result of the game session (e.g., \"1-0\" for White win, \"0-1\" for Black win, \"½-½\" for draw). Returns Task SaveGameRecordAsync(GameSession, string) Saves a completed game session as a historical record. Task SaveGameRecordAsync(GameSession gameSession, string result) Parameters gameSession GameSession The completed game session to save. result string The final result of the game session (e.g., \"1-0\" for White win, \"0-1\" for Black win, \"½-½\" for draw). Returns Task SaveGameSessionAsync(GameSession) Saves the current state of an active game session. Task SaveGameSessionAsync(GameSession gameSession) Parameters gameSession GameSession The game session to save. Returns Task TryMakeMoveAsync(string, MoveDto) Processes a move attempt in an active game session. Task<MoveResultDto> TryMakeMoveAsync(string gameId, MoveDto moveDto) Parameters gameId string The unique identifier of the game session. moveDto MoveDto The move data containing details of the move. Returns Task<MoveResultDto> The result of the move attempt, indicating success or failure."
  },
  "api/GamePlayService.Services.html": {
    "href": "api/GamePlayService.Services.html",
    "title": "Namespace GamePlayService.Services | ChessGamePlayService",
    "summary": "Namespace GamePlayService.Services Classes ChessValidator Provides validation logic for chess moves based on the current board state. GameHub SignalR hub for managing game sessions and player interactions. GameRecordService Provides methods for managing game records in the database. GameSearchService Provides methods for managing the game search process, including adding and removing players from the search queue. GameSessionService Provides methods for managing game sessions, including creation, updates, and moves processing. Interfaces IGameRecordService Provides methods for managing game records in the database. IGameSearchService Provides methods for managing the game search process, including adding and removing players from the search queue. IGameSessionService Provides methods for managing game sessions, including creation, updates, and moves processing."
  },
  "docs/game-mechanics.html": {
    "href": "docs/game-mechanics.html",
    "title": "Game Mechanics | ChessGamePlayService",
    "summary": "Game Mechanics In this section, we describe the mechanics of the chess game implemented in the system, covering the rules and logic behind each aspect of the game. General Rules Objective: The primary goal of the game is to checkmate the opponent's king. A player wins by placing the opponent's king in a position where it cannot escape capture. Turns: Players take turns to make moves, with white always moving first. Piece Movement: Each piece has a specific way of moving on the board: Pawns: Move forward one square but capture diagonally. On their first move, pawns can move two squares. Knights: Move in an L-shape: two squares in one direction and then one square perpendicular to that. Bishops: Move diagonally any number of squares. Rooks: Move horizontally or vertically any number of squares. Queens: Combine the movement of both rooks and bishops. Kings: Move one square in any direction and are involved in castling. Castling: A special move where the king and a rook move simultaneously. The king moves two squares toward the rook, and the rook jumps over the king to the square next to it. Castling can only occur if neither the king nor the rook has moved, and if the squares between them are unoccupied. En Passant: A special pawn capture that occurs when a pawn moves two squares forward from its starting position and lands next to an opponent's pawn. The opponent can capture it as though it had only moved one square. Promotion: When a pawn reaches the opponent’s back rank, it can be promoted to a queen, rook, bishop, or knight. Special Scenarios Stalemate: If a player is not in check but has no legal moves, the game ends in a stalemate (a draw). Check: A king is in check if it is under attack by an opponent's piece. The player must move the king or block the attack to resolve the check. Game End A game can end in several ways: Checkmate: One player wins by checkmating the opponent's king. Stalemate: The game ends in a draw if the player cannot make a valid move and is not in check. Resignation: A player may concede defeat at any time during the game. Timeout: If a player runs out of time (in timed games), they lose the game. For detailed information about the rules and how moves are processed, refer to the Move System section. Enjoy your game!"
  },
  "docs/game-state-and-board.html": {
    "href": "docs/game-state-and-board.html",
    "title": "Game State and Board | ChessGamePlayService",
    "summary": "Game State and Board In this section, we explain how the game state and board are represented and managed within the system. This includes the structure of the board, piece placement, and how the game state is tracked during a match. Board Representation The board is represented as an 8x8 grid, where each square can contain either a chess piece or be empty. Each piece is represented by a character that defines its type and color: Uppercase letters (A-Z) represent white pieces. Lowercase letters (a-z) represent black pieces. Empty squares are represented by a space or null character. For example, the starting position of the pieces is represented as: rnbqkbnr pppppppp ........ ........ ........ ........ PPPPPPPP RNBQKBNR Here: r = black rook n = black knight b = black bishop q = black queen k = black king p = black pawn P = white pawn R = white rook N = white knight B = white bishop Q = white queen K = white king Game State Tracking The game state includes: Active Color: The color of the player who is currently taking their turn (either \"w\" for white or \"b\" for black). Castling Rights: The availability of castling for both players. This is represented as a combination of K (white king), Q (white queen), k (black king), and q (black queen). En Passant: Indicates whether en passant capture is possible on the next move. This is recorded as a square, such as e3 or - (if no en passant is possible). Halfmove Clock: A counter that tracks the number of half-moves since the last pawn move or capture. This is used for the fifty-move rule. Fullmove Number: The total number of full moves that have been made in the game. For example, the starting position in Forsyth-Edwards Notation (FEN) is: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 This notation represents: The board setup. The active color (white to move). Castling rights (KQkq means both players have castling rights on both sides). En passant target square (- means no en passant). The halfmove clock (0). The fullmove number (1). Updating the Board Each move updates the board's state: Pieces are moved from one square to another. Special moves like castling, en passant, or pawn promotion are handled specifically. The game state is updated accordingly, including the active color, castling rights, en passant, and halfmove clock. The game continues until a checkmate, stalemate, resignation, or timeout occurs. For detailed information about the board representation and updating the game state, refer to the Game Mechanics and Move System sections. Enjoy your game!"
  },
  "docs/gameController-api.html": {
    "href": "docs/gameController-api.html",
    "title": "GameRecordController API Documentation | ChessGamePlayService",
    "summary": "GameRecordController API Documentation Overview The GameRecordController is responsible for the client receiving information about completed games using the HTTP protocol. Methods 1. GetGameRecordById Method Name: GetGameRecordById HTTP Method: GET Endpoint: /api/games/{gameId} Parameters: gameId (Guid): The ID of the game record to retrieve. Returns: IActionResult: Ok(game) if the game record with the specified gameId is found. NotFound() if no game record is found for the given gameId. Description: Retrieves a game record by its unique ID. 2. GetAllGameRecords Method Name: GetAllGameRecords HTTP Method: GET Endpoint: /api/games Returns: IActionResult: Ok(games) if game records are successfully retrieved. NotFound() if no game records are found. Description: Retrieves a list of all available game records."
  },
  "docs/gameHub-api.html": {
    "href": "docs/gameHub-api.html",
    "title": "GameHub API Documentation | ChessGamePlayService",
    "summary": "GameHub API Documentation Overview The GameHub is responsible for managing communication between clients and the server. It handles game creation, game joining, player matching, game state synchronization, moves, and chat messages. It uses SignalR to communicate with clients through the following events. Event List 1. GameFound Event Name: GameFound Triggered When: When a game is found and players are added to the game session. Parameters: gameId (string): The ID of the game that players have joined. Client Side Usage: connection.on(\"GameFound\", function (gameId) { console.log(\"Game found: \" + gameId); }); 2. ReceiveGameState Event Name: ReceiveGameState Triggered When: After a game has started or when the game state is updated (e.g., after a move or a new message). Parameters: gameState (object): The current state of the game, including the board state, players, messages, and game status. Client Side Usage: connection.on(\"ReceiveGameState\", function (gameState) { // Update the game state UI with the new game state }); 3. ReceiveMove Event Name: ReceiveMove Triggered When: After a player makes a move in the game. Parameters: moveResult (object): The result of the move, including success status and message. Client Side Usage: connection.on(\"ReceiveMove\", function (moveResult) { // Handle the move result }); 4. GameFinished Event Name: GameFinished Triggered When: When the game has finished, either due to checkmate, stalemate, or draw. Parameters: looser (string): The name of the player who lost, or \"½-½\" in case of a draw. Client Side Usage: connection.on(\"GameFinished\", function (looser) { console.log(\"Game finished. Looser: \" + looser); }); 5. ChatMessageReceived Event Name: ChatMessageReceived Triggered When: When a player sends a chat message in the game. Parameters: chatMessage (object): The chat message containing the author and text. Client Side Usage: connection.on(\"ChatMessageReceived\", function (chatMessage) { // Display the chat message in the game chat UI }); Methods 1. StartGameSearch Method Name: StartGameSearch Parameters: playerName (string): The name of the player looking for a game. Description: Adds the player to the search queue for finding an opponent. 2. StopGameSearch Method Name: StopGameSearch Parameters: playerName (string): The name of the player who wants to stop searching for a game. Description: Removes the player from the search queue. 3. MakeMove Method Name: MakeMove Parameters: gameId (string): The ID of the game where the move is made. moveDto (MoveDto): The move made by the player, including the from and to positions, and optional promotion piece. Description: Tries to make a move and notifies all clients with the result and updated game state. 4. SendMessage Method Name: SendMessage Parameters: gameId (string): The ID of the game where the message is sent. chatMessage (ChatMessageDto): The message to be sent, including the author's name and the message text. Description: Sends a chat message to the game and updates the game state for all players. 5. FinishGame Method Name: FinishGame Parameters: gameId (string): The ID of the game to finish. looser (string): The name of the player who lost the game, or \"½-½\" in case of a draw. Description: Ends the game and notifies all players about the result, removing them from the game session. Conclusion The GameHub provides several events for real-time communication between the server and client, including game state updates, move results, and chat messages. The API is designed to handle typical game interactions such as starting a game, making moves, sending messages, and determining the outcome of a game. Only those methods that describe direct interaction with the frontend have been described here. For more information about other methods, please refer to the documentation."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ChessGamePlayService",
    "summary": "Introduction Welcome to the documentation for the Chess Game Project! This project provides a detailed overview of the chess game's architecture and its core systems, such as game mechanics, board state, player system, and move system. The project follows a modular approach with various microservices for different game-related functionalities. It uses technologies like .NET, SignalR, Redis, PostgreSQL, and more to ensure a scalable and efficient gaming experience. This documentation is intended for developers and users who want to understand the system architecture, game mechanics, and how the game operates. Key Features Real-Time Multiplayer: Players can engage in chess matches with real-time updates using SignalR. Game State Management: The game state is managed efficiently with Redis for caching and PostgreSQL for storing player data and game records. Player System: Players can join the game, make moves, and interact with each other in a competitive environment. Move Validation: The system ensures that each move is valid based on the current state of the game and adheres to chess rules. Game Records: Completed games are saved with all moves and results for historical reference. Happy exploring!"
  },
  "docs/move-system.html": {
    "href": "docs/move-system.html",
    "title": "Move System | ChessGamePlayService",
    "summary": "Move System The Move System outlines the mechanics and rules governing the movement of chess pieces in the game. Move Validation Each move made by a player is validated based on the following criteria: Player's Piece: A player can only move their own pieces. If a player attempts to move an opponent’s piece, the move is rejected. Piece-Specific Movement Rules: Each chess piece follows specific rules for movement: Pawns can move forward one square, but capture diagonally. Knights move in an \"L\" shape. Bishops move diagonally, and Rooks move vertically or horizontally. Queens combine the movement of both Bishops and Rooks. Kings move one square in any direction. Target Square: The destination square must either be empty or occupied by an opponent's piece that can be captured. Move Result: If the move is valid, the board is updated. If the move leads to a check or checkmate, appropriate actions are taken. Move Types Normal Move: A standard move of a piece from one square to another. Capture Move: A move that involves taking an opponent's piece. En Passant: A special pawn capture move under specific conditions. Castling: A special move involving the King and a Rook under specific conditions. Promotion: When a pawn reaches the last rank, it can be promoted to a Queen, Rook, Bishop, or Knight. Move Notation Each move is recorded using Standard Algebraic Notation (SAN). For example: e5: A pawn moves from e5. Nf3: A knight moves to f3. Qxd5: A queen captures a piece on d5. O-O: Kingside castling. Move Execution The execution of a move involves: Identifying the piece: Determine which piece is being moved and whether the move is valid. Updating the board state: After a valid move, the piece is placed on the destination square, and the originating square is cleared. Handling Special Moves: Special moves such as castling or en passant are processed with additional logic to ensure they follow the rules."
  },
  "docs/player-system.html": {
    "href": "docs/player-system.html",
    "title": "Player System | ChessGamePlayService",
    "summary": "Player System The Player System handles the management of players in the chess game. This section explains how players are represented, how they interact with the game, and how the system tracks each player's activity. Player Representation Players are represented as objects with key details such as their name, connection ID (for online play), and time reserve for each game. These details are encapsulated in the PlayerInGameDto record. public record PlayerInGameDto(string Name, string ConnectionId, TimeSpan TimeReserve) { } Name: The name of the player (e.g., \"Alice\" or \"Bob\"). ConnectionId: A unique identifier for the player's connection, used in multiplayer games to handle communication. TimeReserve: The amount of time reserved for the player to complete their moves. This reserve decreases as the player makes moves. Player Roles In each game session, players are assigned a role based on their color: White Player: The player who controls the white pieces and makes the first move. Black Player: The player who controls the black pieces and moves second. The GameSession class encapsulates both players: public class GameSession { public Guid Id { get; set; } = Guid.NewGuid(); public required PlayerInGameDto WhitePlayer { get; set; } public required PlayerInGameDto BlackPlayer { get; set; } public List<Move> Moves { get; set; } = []; public List<ChatMessageDto> Messages { get; set; } = []; public string CurrentFen { get; set; } = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"; public DateTime CreatedAt { get; set; } = DateTime.UtcNow; } In this structure: WhitePlayer and BlackPlayer represent the two participants in the game, encapsulated in the PlayerInGameDto records. The GameSession keeps track of the entire game session, including moves made, messages exchanged, and the current state of the game board. Time Management Each player is given a time reserve, which is tracked separately. This time reserve allows players to make their moves within a set time limit. Once a player's time is up, the game may end in a timeout, depending on the game rules. Warning The functionality of the different game modes has not yet been implemented. Currently, the games are played without time control. Multiplayer and Chat In a multiplayer game, players can interact through messages. These chat messages are stored in the Messages list of the GameSession: public List<ChatMessageDto> Messages { get; set; } = []; Each message contains an author and the text of the message, as represented by the ChatMessageDto record: public record ChatMessageDto(string Author, string Text) { } This enables real-time communication between players during the game. For more information on how moves and game sessions are handled, refer to the Move System and GameState and Board sections. Happy gaming!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Chess GamePlay Service Documentation | ChessGamePlayService",
    "summary": "Welcome to the Chess GamePlay Service Documentation This documentation will guide you through the architecture, features, and how to get started with the project. Quick Start This project is only a conditional backend part that describes the gameplay logic and presents an external API for interaction. A detailed description of the external API is contained on the pages: GameHub External API for gameplay. GameRecordController External API for interaction with the saved games database. Documentation Overview Introduction: An overview of the project and its purpose. Game Mechanics: Information about the rules of the chess game and how they are implemented. GameState and Board: Details on how the chessboard state is represented and managed. Player System: A system for managing players in the game and their Elo ratings after the game is over. Move System: Information on how moves are handled, validated, and stored. Project Structure The project is organized into several key components: Main: ASP.NET Core API that handles the logic of current games and the management of completed games. Database: PostgreSQL to store data about finished games and separately about moves for deep analysis. Cache: Redis to store data about users searching for a game and unfinished games. Getting Help If you need further assistance, join the discussion on our GitHub Issues."
  }
}