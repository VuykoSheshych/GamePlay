namespace GamePlayService.Models.Pieces;
public class King(string color, string position) : ChessPiece(color, position)
{
	public override List<string> GetPossibleMoves(BoardState boardState)
	{
		List<string> moves = [];
		var (row, col) = ConvertToBoardIndex(Position);

		// –ú–æ–∂–ª–∏–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏ —Ä—É—Ö—É –¥–ª—è –∫–æ—Ä–æ–ª—è: –≤–≥–æ—Ä—É, –≤–Ω–∏–∑, –≤–ª—ñ–≤–æ, –≤–ø—Ä–∞–≤–æ —Ç–∞ –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—è—Ö
		var directions = new (int, int)[]
		{
			(-1, 0),  // –í–≥–æ—Ä—É
			(1, 0),   // –í–Ω–∏–∑
			(0, -1),  // –í–ª—ñ–≤–æ
			(0, 1),   // –í–ø—Ä–∞–≤–æ
			(-1, -1), // –õ—ñ–≤–æ—Ä—É—á –≤–Ω–∏–∑ (–¥—ñ–∞–≥–æ–Ω–∞–ª—å)
			(-1, 1),  // –ü—Ä–∞–≤–æ—Ä—É—á –≤–Ω–∏–∑ (–¥—ñ–∞–≥–æ–Ω–∞–ª—å)
			(1, -1),  // –õ—ñ–≤–æ—Ä—É—á –≤–≥–æ—Ä—É (–¥—ñ–∞–≥–æ–Ω–∞–ª—å)
			(1, 1)    // –ü—Ä–∞–≤–æ—Ä—É—á –≤–≥–æ—Ä—É (–¥—ñ–∞–≥–æ–Ω–∞–ª—å)
		};

		foreach (var (dRow, dCol) in directions)
		{
			int currentRow = row + dRow;
			int currentCol = col + dCol;

			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –º–µ–∂–∞—Ö –¥–æ—à–∫–∏
			if (IsValidCell(currentRow, currentCol))
			{
				char target = boardState.Board[currentRow, currentCol];

				// –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ñ—ñ–≥—É—Ä—É —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –¥–æ–¥–∞—î–º–æ —Ö—ñ–¥
				if (target == '\0' || IsOpponentPiece(target))
				{
					moves.Add($"{(char)(currentCol + 'a')}{8 - currentRow}");
				}
			}
		}

		// üîπ –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ —Ö–æ–¥–∏ –¥–ª—è —Ä–æ–∫—ñ—Ä–æ–≤–∫–∏
		AddCastlingMoves(boardState, moves);

		return moves;
	}
	private void AddCastlingMoves(BoardState boardState, List<string> moves)
	{
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–æ–ª—å —â–µ –º–∞—î –ø—Ä–∞–≤–æ –Ω–∞ —Ä–æ–∫—ñ—Ä–æ–≤–∫—É
		if ((Color == "w" && Position == "e1") || (Color == "b" && Position == "e8"))
		{
			bool canCastleKingside = Color == "w" ? boardState.CastlingRights.Contains('K') : boardState.CastlingRights.Contains('k');
			bool canCastleQueenside = Color == "w" ? boardState.CastlingRights.Contains('Q') : boardState.CastlingRights.Contains('q');

			if (canCastleKingside && IsKingsideCastlingPossible(boardState))
			{
				moves.Add(Color == "w" ? "g1" : "g8"); // –ö–æ—Ä–æ—Ç–∫–∞ —Ä–æ–∫—ñ—Ä–æ–≤–∫–∞
			}
			if (canCastleQueenside && IsQueensideCastlingPossible(boardState))
			{
				moves.Add(Color == "w" ? "c1" : "c8"); // –î–æ–≤–≥–∞ —Ä–æ–∫—ñ—Ä–æ–≤–∫–∞
			}
		}
	}
	private bool IsKingsideCastlingPossible(BoardState boardState)
	{
		int rank = (Color == "w") ? 7 : 0;

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –º—ñ–∂ –∫–æ—Ä–æ–ª–µ–º —ñ —Ç—É—Ä–æ—é –ø–æ—Ä–æ–∂–Ω—ñ
		return boardState.Board[rank, 5] == '\0' && boardState.Board[rank, 6] == '\0';
	}
	private bool IsQueensideCastlingPossible(BoardState boardState)
	{
		int rank = (Color == "w") ? 7 : 0;

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –º—ñ–∂ –∫–æ—Ä–æ–ª–µ–º —ñ —Ç—É—Ä–æ—é –ø–æ—Ä–æ–∂–Ω—ñ
		return boardState.Board[rank, 1] == '\0' && boardState.Board[rank, 2] == '\0' && boardState.Board[rank, 3] == '\0';
	}
}